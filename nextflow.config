manifest {
    name = "cerebro"
    author = "@esteinig"
    defaultBranch = "main"
    homePage = 'https://github.com/esteinig/cerebro'
    description = 'Clinical metagenomic diagnostics pipeline'
    mainScript = 'main.nf'
    version = '0.12.0'
    nextflowVersion = '>=24.04'
}


params {

  fastqPaired                         = null                                  // glob string
  fastqNanopore                       = null                                  // glob string

  sampleSheet                         = null                                  // production sample sheet
  sampleSheetProduction               = false                                 // TODO: run_id, run_date, host columns required

  executionDirectory                  = "."                                   // cerebro-tower execution directory 
  stageDirectory                      = "$params.executionDirectory/stage"    // cerebro-tower json staged sample 

  outputDirectory                     = "$params.executionDirectory/output"   // output directory
  databaseDirectory                   = "db"                                  // db base directory

  nanopore                            = false
  monochrome                          = false

  skipAssembly                        = ["__POS"]

  cerebroProduction {

    enabled                           = false
    
    authConfig  {
      url                             = "http://api.cerebro.localhost"
      tokenEnv                        = "CEREBRO_API_TOKEN"
    }

    fsConfig {
      enabled                         = false
      team                            = "CNS"
    }
    
    uploadConfig {
      enabled                         = true
      team                            = "CNS"
      database                        = "CNS"
      project                         = "Test"
    }

  }

  qualityControl {    
      
      readQuality                     = true
      adapterForward                  = null
      adapterReverse                  = null

      internalControls                = true
      internalControlsAligner         = "minimap2"
      internalControlsIndex           = "$params.databaseDirectory/controls.fasta"
      internalControlsReference       = "$params.databaseDirectory/controls.fasta"

      readDeduplication               = true
      readDeduplicationHead           = 100
      readDeduplicationDeterministic  = false // not implemented at the moment
        
      hostDepletion                   = true
      hostDepletionAligner            = "bowtie2"
      hostDepletionIndex              = "$params.databaseDirectory/chm13v2"
      
      backgroundDepletion             = true
      backgroundDepletionAligner      = "minimap2"
      backgroundDepletionIndex        = "$params.databaseDirectory/background.mmi"
      backgroundDepletionReference    = "$params.databaseDirectory/background.fasta"

      qualityDeduplication            = false  // read quality control before deduplication - not recommended for synthetic controls due to biomass estimates (ERCC/EDCC)

  }


  pathogenDetection {

    taxonomicProfile {

      enabled                         = true
      taxonomy                        = "$params.databaseDirectory/cipher/taxonomy"

      alignment                       = false
      alignmentMethod                 = "bowtie2"
      alignmentIndex                  = "$params.databaseDirectory/cipher/ictv"
      alignmentReference              = "$params.databaseDirectory/cipher/ictv.fasta"
      alignmentSecondary              = false
      vircovArgs                      = "--consensus-min-depth 3 --min-depth-coverage 1 --annotation-preset default"

      classifier                      = true
      classifierMethod                = "kraken2 metabuli ganon"
      profiler                        = true
      profilerMethod                  = "bracken"

      metabuliIndex                   = "$params.databaseDirectory/cipher/metabuli"
      krakenIndex                     = "$params.databaseDirectory/cipher/kraken2"
      krakenConfidence                = 0.0
      krakenMemoryMapping             = true
      brackenReadLength               = 150
      brackenRank                     = "S"
      brackenMinReads                 = 3
      ganonIndex                      = "$params.databaseDirectory/cipher/ganon"
      ganonDatabasePrefix             = "cipher"
      ganonMultipleMatches            = "em"
      kmcpIndex                       = "$params.databaseDirectory/cipher/kmcp"
      kmcpMode                        = 0
      kmcpLevel                       = "species"
      kmcpMinQueryCoverage            = 0.4
      sylphIndex                      = "$params.databaseDirectory/cipher/sylph/cipher.syldb"
      sylphMetadata                   = "$params.databaseDirectory/cipher/sylph/metadata.tsv.gz"
      sylphMinNumberKmers             = 20
      sylphQueryCompression           = 100

    }

    metagenomeAssembly {         

      enabled                                = true
      
      assemblyMethod                         = "megahit"
      assemblyArgs                           = ""
      assemblyKmerList                       = "21,29,39,59,79,99,119,127"
      assemblyMinContigLength                = 200  
      
      binningMethod                          = "concoct"  // concoct, metabat2, semibin2  
      
      binningChunkSize                       = 10000      // concoct
      binningReadLength                      = 150        // concoct
      binningMinContigLength                 = 1500       // concoct / semibin2 / metabat2 >= 1500
      binningMinBinSize                      = 5000       // concoct / metabat2

      contigProfile                          = true
      contigProfileMethod                    = "blast"
      contigProfileIndex                     = "$params.databaseDirectory/cipher/blast" 
      contigProfileBlastPrefix               = "cipher"   // requires database prefix for BLAST
      contigProfileBlastMinPercentIdentity   = 80.0       // relaxed homolog search
      contigProfileBlastMinEvalue            = "1e-06"    // relaxed homolog search
      contigProfileBlastMaxTargetSeqs        = 5
      
      virusDetection                         = false
      virusDetectionMethod                   = "genomad"
      virusDetectionMinContigLength          = 2000
      virusDetectionIndex                    = "$params.databaseDirectory/genomad_db"
      
      virusContigPolish                      = false
      virusContigPolishMethod                = "cobra"
      
      virusProfile                           = false
      virusProfileMethod                     = "minimap2"
      virusProfileIndex                      = "$params.databaseDirectory/img_vr.fasta.xz"
      virusProfileReference                  = "$params.databaseDirectory/img_vr.fasta.xz"
      
      rdrpDetection                          = false
      rdrpDetectionMethod                    = "rdrp-scan"
      rdrpLibraryTag                         = "RNA"
      rdrpDetectionIndex                     = "$params.databaseDirectory/rdrp_db"

    }

    hostGenome {

      aneuploidyDetection            = false
      aneuploidyReferenceMethod      = "cnvkit"
      aneuploidyLibraryTag           = "DNA HOST"

      aneuploidyAligner              = "minimap2"
      aneuploidyIndex                = "$params.databaseDirectory/chm13v2.mmi"
      aneuploidyReferenceAlignment   = "$params.databaseDirectory/aneuploidy.bam"

      signatureBacterialViral        = false
      signatureLibraryTag            = "RNA HOST"
      signatureReferences            = "two_gene_signature.fasta"
      
    }
  }

  panviralEnrichment {            

    taxonomy                          = "$params.databaseDirectory/taxonomy"  // production only

    virusAligner                      = "bowtie2"
    virusIndex                        = "$params.databaseDirectory/ictv"
    virusReference                    = "$params.databaseDirectory/ictv.fasta"
    vircovArgs                        = "--remap-exclude-bins 'Homo sapiens'"

  }

  resources {

    threads {
      fastp                 = 8
      nanoq                 = 1
      scrubby               = 8
      vircov                = 8
      vircovRemap           = 2
      vircovParallel        = 4
      cerebro               = 2
      kraken2               = 8
      bracken               = 1
      minimap2              = 4
      metabat2              = 4
      metabuli              = 8
      sylph                 = 8
      semibin2              = 2
      kmcp                  = 8
      ganon                 = 8
      metaspades            = 8
      megahit               = 8 
      concoct               = 4
      blast                 = 8
    }
    memory {
      cerebro               = "16 GB"
      metaspades            = "16 GB"
      megahit               = "16 GB"
      metabuli              = "16 GB"
      kraken2               = "16 GB"
      kmcp                  = "16 GB"
      ganon                 = "16 GB"
      sylph                 = "16 GB"
      bracken               = "16 GB"
      vircov                = "16 GB"
      blast                 = "16 GB"
    }

    conda {
      bracken               = "$baseDir/lib/resources/conda/bracken.yml"
      cerebro               = "$baseDir/lib/resources/conda/cerebro.yml"
      concoct               = "$baseDir/lib/resources/conda/concoct.yml"
      fastp                 = "$baseDir/lib/resources/conda/fastp.yml"
      nanoq                 = "$baseDir/lib/resources/conda/nanoq.yml"
      kmcp                  = "$baseDir/lib/resources/conda/kmcp.yml"
      ganon                 = "$baseDir/lib/resources/conda/ganon.yml"
      kraken2               = "$baseDir/lib/resources/conda/kraken2.yml"
      megahit               = "$baseDir/lib/resources/conda/megahit.yml"
      metabuli              = "$baseDir/lib/resources/conda/metabuli.yml"
      metaspades            = "$baseDir/lib/resources/conda/metaspades.yml"
      minimap2              = "$baseDir/lib/resources/conda/minimap2.yml"
      metabat2              = "$baseDir/lib/resources/conda/metabat2.yml"
      scrubby               = "$baseDir/lib/resources/conda/scrubby.yml"
      sylph                 = "$baseDir/lib/resources/conda/sylph.yml"
      semibin2              = "$baseDir/lib/resources/conda/semibin2.yml"
      vircov                = "$baseDir/lib/resources/conda/vircov.yml"
      virscrub              = "$baseDir/lib/resources/conda/virscrub.yml"
      blast                 = "$baseDir/lib/resources/conda/blast.yml"
    }
  }
}

profiles {

  conda {
    conda.enabled = true
  }
  mamba {
    conda.enabled = true
    conda.useMamba = true
  }

  panviral {
    params.qualityControl.readDeduplication    = false  
    params.qualityControl.internalControls     = false 
    params.qualityControl.backgroundDepletion  = false 

    params.panviralEnrichment.taxonomy         = "$params.databaseDirectory/ictv/taxonomy"

    params.panviralEnrichment.virusAligner     = "bowtie2"
    params.panviralEnrichment.virusIndex       = "$params.databaseDirectory/ictv/vircov/ictv"
    params.panviralEnrichment.virusReference   = "$params.databaseDirectory/ictv/vircov/ictv.fasta"
    params.panviralEnrichment.vircovArgs       = "--remap-exclude-bins 'Homo sapiens'"
  }

  cns {
    params.qualityControl.readDeduplication   = true  
    params.qualityControl.adapterForward      = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
    params.qualityControl.adapterReverse      = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
  }

  keepHost {
    params.qualityControl.hostDepletion       = false
  }

  deduplicate {
    params.qualityControl.hostDepletion        = false
    params.qualityControl.qualityDeduplication = true

  }

  cipher {

    params.pathogenDetection.taxonomicProfile.taxonomy                        = "$params.databaseDirectory/cipher/taxonomy"

    params.pathogenDetection.taxonomicProfile.classifier                      = true
    params.pathogenDetection.taxonomicProfile.classifierMethod                = "kraken2 metabuli ganon"
    params.pathogenDetection.taxonomicProfile.profiler                        = true
    params.pathogenDetection.taxonomicProfile.profilerMethod                  = "bracken ganon"

    params.pathogenDetection.taxonomicProfile.alignment                       = true
    params.pathogenDetection.taxonomicProfile.alignmentMethod                 = "bowtie2"
    params.pathogenDetection.taxonomicProfile.alignmentIndex                  = "$params.databaseDirectory/cipher/vircov/ictv"
    params.pathogenDetection.taxonomicProfile.alignmentReference              = "$params.databaseDirectory/cipher/vircov/ictv.fasta"
    params.pathogenDetection.taxonomicProfile.vircovArgs                      = "--remap-exclude-bins 'Homo sapiens'"

    params.pathogenDetection.taxonomicProfile.metabuliIndex                   = "$params.databaseDirectory/cipher/metabuli"
    params.pathogenDetection.taxonomicProfile.krakenIndex                     = "$params.databaseDirectory/cipher/kraken2"
    params.pathogenDetection.taxonomicProfile.ganonIndex                      = "$params.databaseDirectory/cipher/ganon"
    params.pathogenDetection.taxonomicProfile.ganonDatabasePrefix             = "cipher"
    params.pathogenDetection.taxonomicProfile.kmcpIndex                       = "$params.databaseDirectory/cipher/kmcp"
    params.pathogenDetection.taxonomicProfile.sylphIndex                      = "$params.databaseDirectory/cipher/sylph/cipher.syldb"
    params.pathogenDetection.taxonomicProfile.sylphMetadata                   = "$params.databaseDirectory/cipher/sylph/metadata.tsv.gz"

    params.resources.memory.metaspades             = "64 GB"
    params.resources.memory.megahit                = "64 GB"
    params.resources.memory.metabuli               = "64 GB"
    params.resources.memory.kraken2                = "768 GB"
    params.resources.memory.kmcp                   = "256 GB"
    params.resources.memory.ganon                  = "384 GB"
    params.resources.memory.sylph                  = "64 GB"
    params.resources.memory.bracken                = "32 GB"
    params.resources.memory.vircov                 = "32 GB"
    params.resources.memory.blast                  = "128 GB"

  }

  ictv {
    
    params.pathogenDetection.taxonomicProfile.taxonomy                        = "$params.databaseDirectory/ictv/taxonomy"
    
    params.pathogenDetection.taxonomicProfile.alignment                       = true
    params.pathogenDetection.taxonomicProfile.alignmentMethod                 = "bowtie2"
    params.pathogenDetection.taxonomicProfile.alignmentIndex                  = "$params.databaseDirectory/ictv/vircov/ictv"
    params.pathogenDetection.taxonomicProfile.alignmentReference              = "$params.databaseDirectory/ictv/vircov/ictv.fasta"
    params.pathogenDetection.taxonomicProfile.vircovArgs                      = "--remap-exclude-bins 'Homo sapiens'"

    params.pathogenDetection.taxonomicProfile.metabuliIndex                   = "$params.databaseDirectory/ictv/metabuli"
    params.pathogenDetection.taxonomicProfile.krakenIndex                     = "$params.databaseDirectory/ictv/kraken2"
    params.pathogenDetection.taxonomicProfile.ganonIndex                      = "$params.databaseDirectory/ictv/ganon"
    params.pathogenDetection.taxonomicProfile.ganonDatabasePrefix             = "ictv"
    params.pathogenDetection.taxonomicProfile.kmcpIndex                       = "$params.databaseDirectory/ictv/kmcp"
    params.pathogenDetection.taxonomicProfile.sylphIndex                      = "$params.databaseDirectory/ictv/sylph/ictv.syldb"
    params.pathogenDetection.taxonomicProfile.sylphMetadata                   = "$params.databaseDirectory/ictv/sylph/metadata.tsv.gz"

    params.resources.memory.metaspades             = "128 GB"
    params.resources.memory.megahit                = "32 GB"
    params.resources.memory.metabuli               = "32 GB"
    params.resources.memory.kraken2                = "32 GB"
    params.resources.memory.kmcp                   = "32 GB"
    params.resources.memory.ganon                  = "32 GB"
    params.resources.memory.sylph                  = "32 GB"
    params.resources.memory.bracken                = "32 GB"
    params.resources.memory.vircov                 = "32 GB"

  }

  ictv_nohost {
    
    params.pathogenDetection.taxonomicProfile.taxonomy                        = "$params.databaseDirectory/ictv/taxonomy"

    params.pathogenDetection.taxonomicProfile.alignment                       = true
    params.pathogenDetection.taxonomicProfile.alignmentMethod                 = "bowtie2"
    params.pathogenDetection.taxonomicProfile.alignmentIndex                  = "$params.databaseDirectory/ictv/vircov/ictv"
    params.pathogenDetection.taxonomicProfile.alignmentReference              = "$params.databaseDirectory/ictv/vircov/ictv.fasta"
    params.pathogenDetection.taxonomicProfile.vircovArgs                      = ""

    params.pathogenDetection.taxonomicProfile.metabuliIndex                   = "$params.databaseDirectory/ictv/metabuli"
    params.pathogenDetection.taxonomicProfile.krakenIndex                     = "$params.databaseDirectory/ictv/kraken2"
    params.pathogenDetection.taxonomicProfile.ganonIndex                      = "$params.databaseDirectory/ictv/ganon"
    params.pathogenDetection.taxonomicProfile.ganonDatabasePrefix             = "ictv"
    params.pathogenDetection.taxonomicProfile.kmcpIndex                       = "$params.databaseDirectory/ictv/kmcp"
    params.pathogenDetection.taxonomicProfile.sylphIndex                      = "$params.databaseDirectory/ictv/sylph/ictv.syldb"
    params.pathogenDetection.taxonomicProfile.sylphMetadata                   = "$params.databaseDirectory/ictv/sylph/metadata.tsv.gz"

    params.resources.memory.metaspades             = "128 GB"
    params.resources.memory.megahit                = "32 GB"
    params.resources.memory.metabuli               = "32 GB"
    params.resources.memory.kraken2                = "32 GB"
    params.resources.memory.kmcp                   = "32 GB"
    params.resources.memory.ganon                  = "32 GB"
    params.resources.memory.sylph                  = "32 GB"
    params.resources.memory.bracken                = "32 GB"
    params.resources.memory.vircov                 = "32 GB"

  }


  micro {
      executor.$local.cpus = 8
      executor.$local.memory = '32 GB'
  }
  tiny {
      executor.$local.cpus = 16
      executor.$local.memory = '64 GB'
  }
  mini {
      executor.$local.cpus = 32
      executor.$local.memory = '128 GB'
  }
  small {
      executor.$local.cpus = 64
      executor.$local.memory = '512 GB'
  }
  medium {
      executor.$local.cpus = 128
      executor.$local.memory = '1024 GB'
  }
  large {
      executor.$local.cpus = 196
      executor.$local.memory = '1536 GB'
  }
  xl {
      executor.$local.cpus = 256
      executor.$local.memory = '2048 GB'
  }
  dgx {
    params.resources.threads.fastp                 = 16
    params.resources.threads.scrubby               = 16
    params.resources.threads.vircov                = 32
    params.resources.threads.vircovRemap           = 4
    params.resources.threads.vircovParallel        = 8
    params.resources.threads.cerebro               = 1
    params.resources.threads.kraken2               = 32
    params.resources.threads.bracken               = 1
    params.resources.threads.minimap2              = 16
    params.resources.threads.metabat2              = 16
    params.resources.threads.metabuli              = 32
    params.resources.threads.sylph                 = 32
    params.resources.threads.kmcp                  = 32
    params.resources.threads.ganon                 = 32
    params.resources.threads.metaspades            = 32
    params.resources.threads.megahit               = 32
    params.resources.threads.concoct               = 8
    params.resources.threads.blast                 = 32
  }

}

process {

    errorStrategy = "ignore"

    withLabel: cerebro { 
      cpus = params.resources.threads.cerebro 
      memory = params.resources.memory.cerebro
      conda = params.resources.conda.cerebro // dev version
      
    }
    withLabel: panviralVirusRecovery { 
      cpus = params.resources.threads.vircov 
      memory = params.resources.memory.vircov
      conda = params.resources.conda.vircov
    }
    withLabel: panviralVirusTools { 
      cpus = 1
      conda = params.resources.conda.vircov
    }
    withLabel: qualityReadScan { 
      cpus = params.resources.threads.cerebro 
      conda = params.resources.conda.cerebro // dev version
    }
    withLabel: qualityDeduplication { 
      cpus = params.resources.threads.cerebro 
      conda = params.resources.conda.cerebro // dev version
    }
    withLabel: qualityReadQualityFastp { 
      cpus = params.resources.threads.fastp 
      conda = params.resources.conda.fastp
    }
    withLabel: qualityReadQualityNanoq { 
      cpus = params.resources.threads.nanoq 
      conda = params.resources.conda.nanoq
    }
    withLabel: qualityHostDepletion { 
      cpus = params.resources.threads.scrubby 
      conda = params.resources.conda.scrubby
    }
    withLabel: qualityInternalControls { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.virscrub
    }
    withLabel: qualityBackgroundDepletion { 
      cpus = params.resources.threads.vircov 
      conda = params.resources.conda.virscrub
    }
    withLabel: pathogenProfileVircov {
      cpus = params.resources.threads.vircov 
      memory = params.resources.memory.vircov
      conda = params.resources.conda.vircov
    }
    withLabel: pathogenProfileKraken2 { 
      cpus = params.resources.threads.kraken2 
      memory = params.resources.memory.kraken2
      conda = params.resources.conda.kraken2
    }
    withLabel: pathogenProfileBracken { 
      cpus = params.resources.threads.bracken 
      memory = params.resources.memory.bracken
      conda = params.resources.conda.bracken
    }
    withLabel: pathogenProfileSylph { 
      cpus = params.resources.threads.sylph 
      memory = params.resources.memory.sylph 
      conda = params.resources.conda.sylph
    }
    withLabel: pathogenProfileKmcp { 
      cpus = params.resources.threads.kmcp 
      memory = params.resources.memory.kmcp 
      conda = params.resources.conda.kmcp
    }
    withLabel: pathogenProfileGanon { 
      cpus = params.resources.threads.ganon 
      memory = params.resources.memory.ganon 
      conda = params.resources.conda.ganon
    }
    withLabel: pathogenProfileMetabuli {  
      cpus = params.resources.threads.metabuli
      memory = params.resources.memory.metabuli 
      // conda = params.resources.conda.metabuli  // metabuli requires fork local installation
    }
    withLabel: pathogenAssemblyMetaspades {  
      cpus = params.resources.threads.metaspades
      memory = params.resources.memory.metaspades 
      conda = params.resources.conda.metaspades
    }
    withLabel: pathogenAssemblyMegahit {  
      cpus = params.resources.threads.megahit
      memory = params.resources.memory.megahit 
      conda = params.resources.conda.megahit
      time = "2h"
    }
    withLabel: pathogenAssemblyContigCoverage {  
      cpus = params.resources.threads.minimap2
      conda = params.resources.conda.minimap2
    }
    withLabel: pathogenAssemblyConcoct {  
      cpus = params.resources.threads.concoct
      conda = params.resources.conda.concoct
    }
    withLabel: pathogenAssemblyMetabat2 {  
      cpus = params.resources.threads.metabat2
      conda = params.resources.conda.metabat2
    }
    withLabel: pathogenAssemblySemiBin2 {  
      cpus = params.resources.threads.semibin2
      conda = params.resources.conda.semibin2
    }
    withLabel: pathogenAssemblyBlast {  
      cpus = params.resources.threads.blast
      memory = params.resources.memory.blast 
      conda = params.resources.conda.blast
    }
}